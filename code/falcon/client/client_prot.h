/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _CLIENT_PROT_H_RPCGEN
#define _CLIENT_PROT_H_RPCGEN

#include <rpc/rpc.h>

#include <pthread.h>

#ifdef __cplusplus
extern "C" {
#endif


struct client_up_arg {
	char *handle;
	struct {
		u_int generation_len;
		uint32_t *generation_val;
	} generation;
	uint32_t client_tag;
};
typedef struct client_up_arg client_up_arg;

struct client_down_arg {
	char *handle;
	struct {
		u_int generation_len;
		uint32_t *generation_val;
	} generation;
	uint32_t layer_status;
	bool_t killed;
	bool_t would_kill;
	uint32_t client_tag;
};
typedef struct client_down_arg client_down_arg;

#define CLIENT_PROG 2000112
#define CLIENT_V1 1

#if defined(__STDC__) || defined(__cplusplus)
#define CLIENT_NULL 0
extern  enum clnt_stat client_null_1(void *, void *, CLIENT *);
extern  bool_t client_null_1_svc(void *, void *, struct svc_req *);
#define CLIENT_UP 1
extern  enum clnt_stat client_up_1(client_up_arg *, void *, CLIENT *);
extern  bool_t client_up_1_svc(client_up_arg *, void *, struct svc_req *);
#define CLIENT_DOWN 2
extern  enum clnt_stat client_down_1(client_down_arg *, void *, CLIENT *);
extern  bool_t client_down_1_svc(client_down_arg *, void *, struct svc_req *);
extern int client_prog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define CLIENT_NULL 0
extern  enum clnt_stat client_null_1();
extern  bool_t client_null_1_svc();
#define CLIENT_UP 1
extern  enum clnt_stat client_up_1();
extern  bool_t client_up_1_svc();
#define CLIENT_DOWN 2
extern  enum clnt_stat client_down_1();
extern  bool_t client_down_1_svc();
extern int client_prog_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_client_up_arg (XDR *, client_up_arg*);
extern  bool_t xdr_client_down_arg (XDR *, client_down_arg*);

#else /* K&R C */
extern bool_t xdr_client_up_arg ();
extern bool_t xdr_client_down_arg ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_CLIENT_PROT_H_RPCGEN */
