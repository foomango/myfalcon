/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include <memory.h> /* for memset */
#include "spy_prot.h"

/* Default timeout can be changed using clnt_control() */
static struct timeval TIMEOUT = { 25, 0 };

enum clnt_stat 
spy_null_1(void *argp, void *clnt_res, CLIENT *clnt)
{
	return (clnt_call(clnt, SPY_NULL,
		(xdrproc_t) xdr_void, (caddr_t) argp,
		(xdrproc_t) xdr_void, (caddr_t) clnt_res,
		TIMEOUT));
}

enum clnt_stat 
spy_register_1(spy_register_arg *argp, spy_res *clnt_res, CLIENT *clnt)
{
	return (clnt_call(clnt, SPY_REGISTER,
		(xdrproc_t) xdr_spy_register_arg, (caddr_t) argp,
		(xdrproc_t) xdr_spy_res, (caddr_t) clnt_res,
		TIMEOUT));
}

enum clnt_stat 
spy_cancel_1(spy_cancel_arg *argp, spy_res *clnt_res, CLIENT *clnt)
{
	return (clnt_call(clnt, SPY_CANCEL,
		(xdrproc_t) xdr_spy_cancel_arg, (caddr_t) argp,
		(xdrproc_t) xdr_spy_res, (caddr_t) clnt_res,
		TIMEOUT));
}

enum clnt_stat 
spy_kill_1(spy_kill_arg *argp, spy_res *clnt_res, CLIENT *clnt)
{
	return (clnt_call(clnt, SPY_KILL,
		(xdrproc_t) xdr_spy_kill_arg, (caddr_t) argp,
		(xdrproc_t) xdr_spy_res, (caddr_t) clnt_res,
		TIMEOUT));
}

enum clnt_stat 
spy_get_gen_1(spy_get_gen_arg *argp, spy_res *clnt_res, CLIENT *clnt)
{
	return (clnt_call(clnt, SPY_GET_GEN,
		(xdrproc_t) xdr_spy_get_gen_arg, (caddr_t) argp,
		(xdrproc_t) xdr_spy_res, (caddr_t) clnt_res,
		TIMEOUT));
}
