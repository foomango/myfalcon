// -*-c++-*-
/* This file was automatically generated by rpcc. */

#ifndef __RPCC_OBS_PROT_H_INCLUDED__
#define __RPCC_OBS_PROT_H_INCLUDED__ 1

#include "xdrmisc.h"


struct obs_register_arg {
  rpc_str<RPC_INFINITY> handle;
};
void *obs_register_arg_alloc ();
bool_t xdr_obs_register_arg (XDR *, void *);
RPC_STRUCT_DECL (obs_register_arg)

template<class T> inline bool
rpc_traverse (T &t, obs_register_arg &obj)
{
  return rpc_traverse (t, obj.handle);
}



struct obs_cancel_arg {
  rpc_str<RPC_INFINITY> handle;
};
void *obs_cancel_arg_alloc ();
bool_t xdr_obs_cancel_arg (XDR *, void *);
RPC_STRUCT_DECL (obs_cancel_arg)

template<class T> inline bool
rpc_traverse (T &t, obs_cancel_arg &obj)
{
  return rpc_traverse (t, obj.handle);
}



struct obs_register_response {
  uint32_t generation;
};
void *obs_register_response_alloc ();
bool_t xdr_obs_register_response (XDR *, void *);
RPC_STRUCT_DECL (obs_register_response)

template<class T> inline bool
rpc_traverse (T &t, obs_register_response &obj)
{
  return rpc_traverse (t, obj.generation);
}



struct obs_probe_msg {
  uint32_t counter;
};
void *obs_probe_msg_alloc ();
bool_t xdr_obs_probe_msg (XDR *, void *);
RPC_STRUCT_DECL (obs_probe_msg)

template<class T> inline bool
rpc_traverse (T &t, obs_probe_msg &obj)
{
  return rpc_traverse (t, obj.counter);
}


#ifndef VMM_OBS_PROG
#define VMM_OBS_PROG 2000500
#endif /* !VMM_OBS_PROG */
extern const rpc_program vmm_obs_prog_1;
enum { VMM_OBS_V1 = 1 };
enum {
  VMM_OBS_NULL = 0,
  VMM_OBS_REGISTER = 1,
  VMM_OBS_CANCEL = 2,
  VMM_OBS_PROBE = 3,
};
#define VMM_OBS_PROG_1_APPLY_NOVOID(macro, void) \
  macro (VMM_OBS_NULL, void, void) \
  macro (VMM_OBS_REGISTER, obs_register_arg, obs_register_response) \
  macro (VMM_OBS_CANCEL, obs_cancel_arg, void) \
  macro (VMM_OBS_PROBE, obs_probe_msg, obs_probe_msg)
#define VMM_OBS_PROG_1_APPLY(macro) \
  VMM_OBS_PROG_1_APPLY_NOVOID(macro, void)

#endif /* !__RPCC_OBS_PROT_H_INCLUDED__ */
