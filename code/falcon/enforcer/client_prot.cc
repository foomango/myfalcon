// -*-c++-*-
/* This file was automatically generated by rpcc. */

#include "client_prot.h"

#ifdef MAINTAINER

const strbuf &
rpc_print (const strbuf &sb, const client_up_arg &obj, int recdepth,
           const char *name, const char *prefix)
{
  if (name) {
    if (prefix)
      sb << prefix;
    sb << "client_up_arg " << name << " = ";
  };
  const char *sep;
  str npref;
  if (prefix) {
    npref = strbuf ("%s  ", prefix);
    sep = "";
    sb << "{\n";
  }
  else {
    sep = ", ";
    sb << "{ ";
  }
  rpc_print (sb, obj.handle, recdepth, "handle", npref);
  sb << sep;
  rpc_print (sb, obj.generation, recdepth, "generation", npref);
  sb << sep;
  rpc_print (sb, obj.client_tag, recdepth, "client_tag", npref);
  if (prefix)
    sb << prefix << "};\n";
  else
    sb << " }";
  return sb;
}
void
print_client_up_arg (const void *_objp, const strbuf *_sbp, int _recdepth,
                     const char *_name, const char *_prefix)
{
  rpc_print (_sbp ? *_sbp : warnx, *static_cast<const client_up_arg *> (_objp),
             _recdepth, _name, _prefix);
}
void
dump_client_up_arg (const client_up_arg *objp)
{
  rpc_print (warnx, *objp);
}

const strbuf &
rpc_print (const strbuf &sb, const client_down_arg &obj, int recdepth,
           const char *name, const char *prefix)
{
  if (name) {
    if (prefix)
      sb << prefix;
    sb << "client_down_arg " << name << " = ";
  };
  const char *sep;
  str npref;
  if (prefix) {
    npref = strbuf ("%s  ", prefix);
    sep = "";
    sb << "{\n";
  }
  else {
    sep = ", ";
    sb << "{ ";
  }
  rpc_print (sb, obj.handle, recdepth, "handle", npref);
  sb << sep;
  rpc_print (sb, obj.generation, recdepth, "generation", npref);
  sb << sep;
  rpc_print (sb, obj.layer_status, recdepth, "layer_status", npref);
  sb << sep;
  rpc_print (sb, obj.killed, recdepth, "killed", npref);
  sb << sep;
  rpc_print (sb, obj.would_kill, recdepth, "would_kill", npref);
  sb << sep;
  rpc_print (sb, obj.client_tag, recdepth, "client_tag", npref);
  if (prefix)
    sb << prefix << "};\n";
  else
    sb << " }";
  return sb;
}
void
print_client_down_arg (const void *_objp, const strbuf *_sbp, int _recdepth,
                       const char *_name, const char *_prefix)
{
  rpc_print (_sbp ? *_sbp : warnx, *static_cast<const client_down_arg *> (_objp),
             _recdepth, _name, _prefix);
}
void
dump_client_down_arg (const client_down_arg *objp)
{
  rpc_print (warnx, *objp);
}

#endif /* MAINTAINER*/
void *
client_up_arg_alloc ()
{
  return New client_up_arg;
}
bool_t
xdr_client_up_arg (XDR *xdrs, void *objp)
{
  switch (xdrs->x_op) {
  case XDR_ENCODE:
  case XDR_DECODE:
    return rpc_traverse (xdrs, *static_cast<client_up_arg *> (objp));
  case XDR_FREE:
    rpc_destruct (static_cast<client_up_arg *> (objp));
    return true;
  default:
    panic ("invalid xdr operation %d\n", xdrs->x_op);
  }
}

void *
client_down_arg_alloc ()
{
  return New client_down_arg;
}
bool_t
xdr_client_down_arg (XDR *xdrs, void *objp)
{
  switch (xdrs->x_op) {
  case XDR_ENCODE:
  case XDR_DECODE:
    return rpc_traverse (xdrs, *static_cast<client_down_arg *> (objp));
  case XDR_FREE:
    rpc_destruct (static_cast<client_down_arg *> (objp));
    return true;
  default:
    panic ("invalid xdr operation %d\n", xdrs->x_op);
  }
}

static const rpcgen_table client_prog_1_tbl[] = {
  CLIENT_PROG_1_APPLY (XDRTBL_DECL)
};
const rpc_program client_prog_1 = {
  CLIENT_PROG, CLIENT_V1, client_prog_1_tbl,
  sizeof (client_prog_1_tbl) / sizeof (client_prog_1_tbl[0]),
  "client_prog_1"
};


